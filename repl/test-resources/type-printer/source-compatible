scala> case class Bag() extends reflect.Selectable
// defined case class Bag
scala> val m = new Bag { val f = 23; def g = 47; def h(i: Int): Int = i; var i = 101; type N = Int; val l = List(42); def p[T](t: T) = t.toString() }
val m:
  Bag{
    val f: Int; def g: Int; def h(i: Int): Int; val i: Int;
      def i_=(x$1: Int): Unit; type N = Int; val l: List[Int];
      def p[T](t: T): String
  } = Bag()
scala> type t = Bag { val f: Int; def g: Int; def h(i: Int): Int; val i: Int; def i_=(x$1: Int): Unit; type N = Int; val l: List[Int]; val s: String @unchecked }
// defined alias type t
   =
    Bag{
      val f: Int; def g: Int; def h(i: Int): Int; val i: Int;
        def i_=(x$1: Int): Unit; type N = Int; val l: List[Int];
        val s: String @unchecked
    }

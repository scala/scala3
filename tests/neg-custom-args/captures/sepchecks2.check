-- Error: tests/neg-custom-args/captures/sepchecks2.scala:10:10 --------------------------------------------------------
10 |  println(c) // error
   |          ^
   |          Separation failure: Illegal access to {c} which is hidden by the previous definition
   |          of value xs with type List[() => Unit].
   |          This type hides capabilities  {c}
   |
   |          where:    => refers to a fresh root capability in the type of value xs
-- Error: tests/neg-custom-args/captures/sepchecks2.scala:13:7 ---------------------------------------------------------
13 |  foo((() => println(c)) :: Nil, c) // error
   |       ^^^^^^^^^^^^^^^^^^^^^^^^
   |Separation failure: argument of type  List[() ->{c} Unit]
   |to method foo: (xs: List[() => Unit], y: Object^): Nothing
   |corresponds to capture-polymorphic formal parameter xs of type  List[() => Unit]
   |and hides capabilities  {c}.
   |Some of these overlap with the captures of the second argument with type  (c : Object^).
   |
   |  Hidden set of current argument        : {c}
   |  Hidden footprint of current argument  : {c}
   |  Capture set of second argument        : {c}
   |  Footprint set of second argument      : {c}
   |  The two sets overlap at               : {c}
   |
   |where:    => refers to a fresh root capability created in method Test2 when checking argument to parameter xs of method foo
-- Error: tests/neg-custom-args/captures/sepchecks2.scala:14:10 --------------------------------------------------------
14 |  val x1: (Object^, Object^) = (c, c) // error
   |          ^^^^^^^^^^^^^^^^^^
   |          Separation failure in value x1's type (Object^, Object^²).
   |          One part,  Object^, hides capabilities  {c}.
   |          Another part,  Object^²,  captures capabilities  {c}.
   |          The two sets overlap at  {c}.
   |
   |          where:    ^  refers to a fresh root capability in the type of value x1
   |                    ^² refers to a fresh root capability in the type of value x1
-- Error: tests/neg-custom-args/captures/sepchecks2.scala:15:10 --------------------------------------------------------
15 |  val x2: (Object^, Object^{d}) = (d, d) // error
   |          ^^^^^^^^^^^^^^^^^^^^^
   |          Separation failure in value x2's type (Object^, Object^{d}).
   |          One part,  Object^, hides capabilities  {d}.
   |          Another part,  Object^{d},  captures capabilities  {d}.
   |          The two sets overlap at  {d}.
   |
   |          where:    ^ refers to a fresh root capability in the type of value x2
-- Error: tests/neg-custom-args/captures/sepchecks2.scala:27:6 ---------------------------------------------------------
27 |  bar((c, c)) // error
   |      ^^^^^^
   |Separation failure in the argument's adapted type (Object^, Object^²).
   |One part,  Object^, hides capabilities  {c}.
   |Another part,  Object^²,  captures capabilities  {c}.
   |The two sets overlap at  {c}.
   |
   |where:    ^  refers to a fresh root capability created in method Test6 when checking argument to parameter x of method bar
   |          ^² refers to a fresh root capability created in method Test6 when checking argument to parameter x of method bar
-- Error: tests/neg-custom-args/captures/sepchecks2.scala:30:9 ---------------------------------------------------------
30 |  val x: (Object^, Object^{c}) = (d, c) // error
   |         ^^^^^^^^^^^^^^^^^^^^^
   |         Separation failure: value x's type (Object^, Object^{c}) hides parameter d.
   |         The parameter needs to be annotated with @consume to allow this.
-- Error: tests/neg-custom-args/captures/sepchecks2.scala:33:9 ---------------------------------------------------------
33 |  val x: (Object^, Object^) = (c, d) // error
   |         ^^^^^^^^^^^^^^^^^^
   |         Separation failure: value x's type (Object^, Object^) hides parameters c and d.
   |         The parameters need to be annotated with @consume to allow this.

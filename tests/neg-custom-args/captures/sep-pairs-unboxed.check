-- Error: tests/neg-custom-args/captures/sep-pairs-unboxed.scala:11:27 -------------------------------------------------
11 |def mkPair(x: Ref^) = Pair(x, x) // error: separation failure
   |                           ^
   |Separation failure: argument of type  (x : Ref^)
   |to constructor Pair: (fst: Ref^, snd: Ref^): Pair
   |corresponds to capture-polymorphic formal parameter fst of type  Ref^²
   |and hides capabilities  {x}.
   |Some of these overlap with the captures of the second argument with type  (x : Ref^).
   |
   |  Hidden set of current argument        : {x}
   |  Hidden footprint of current argument  : {x}
   |  Capture set of second argument        : {x}
   |  Footprint set of second argument      : {x}
   |  The two sets overlap at               : {x}
   |
   |where:    ^  refers to a fresh root capability classified as Mutable in the type of parameter x
   |          ^² refers to a fresh root capability classified as Mutable created in method mkPair when checking argument to parameter fst of constructor Pair
-- Error: tests/neg-custom-args/captures/sep-pairs-unboxed.scala:35:25 -------------------------------------------------
35 |  val twoCopy = Pair(two.fst, two.fst) // error
   |                     ^^^^^^^
   |Separation failure: argument of type  (two.fst : Ref^)
   |to constructor Pair: (fst: Ref^, snd: Ref^): Pair
   |corresponds to capture-polymorphic formal parameter fst of type  Ref^²
   |and hides capabilities  {two.fst}.
   |Some of these overlap with the captures of the second argument with type  (two.fst : Ref^).
   |
   |  Hidden set of current argument        : {two.fst}
   |  Hidden footprint of current argument  : {two.fst}
   |  Capture set of second argument        : {two.fst}
   |  Footprint set of second argument      : {two.fst}
   |  The two sets overlap at               : {two.fst}
   |
   |where:    ^  refers to a fresh root capability classified as Mutable in the type of value fst
   |          ^² refers to a fresh root capability classified as Mutable created in value twoCopy when checking argument to parameter fst of constructor Pair
-- Error: tests/neg-custom-args/captures/sep-pairs-unboxed.scala:41:29 -------------------------------------------------
41 |  val twisted = PairPair(two.fst, two) // error
   |                         ^^^^^^^
   |Separation failure: argument of type  (two.fst : Ref^)
   |to constructor PairPair: (fst: Ref^, snd: Pair^): PairPair
   |corresponds to capture-polymorphic formal parameter fst of type  Ref^²
   |and hides capabilities  {two.fst}.
   |Some of these overlap with the captures of the second argument with type  (two : Pair{val fst: Ref^; val snd: Ref^}^).
   |
   |  Hidden set of current argument        : {two.fst}
   |  Hidden footprint of current argument  : {two.fst}
   |  Capture set of second argument        : {two*}
   |  Footprint set of second argument      : {two*}
   |  The two sets overlap at               : {cap of a new instance of class Pair}
   |
   |where:    ^  refers to a fresh root capability classified as Mutable in the type of value fst
   |          ^² refers to a fresh root capability classified as Mutable created in value twisted when checking argument to parameter fst of constructor PairPair
-- Error: tests/neg-custom-args/captures/sep-pairs-unboxed.scala:47:33 -------------------------------------------------
47 |  val twisted = swapped(two, two.snd) // error
   |                             ^^^^^^^
   |Separation failure: argument of type  (two.snd : Ref^)
   |to method swapped: (@consume x: Pair^, @consume y: Ref^): PairPair^
   |corresponds to capture-polymorphic formal parameter y of type  Ref^²
   |and hides capabilities  {two.snd}.
   |Some of these overlap with the captures of the first argument with type  (two : Pair{val fst: Ref^; val snd: Ref^}^).
   |
   |  Hidden set of current argument        : {two.snd}
   |  Hidden footprint of current argument  : {two.snd}
   |  Capture set of first argument         : {two*}
   |  Footprint set of first argument       : {two*}
   |  The two sets overlap at               : {cap of a new instance of class Pair}
   |
   |where:    ^  refers to a fresh root capability classified as Mutable in the type of value snd
   |          ^² refers to a fresh root capability classified as Mutable created in value twisted when checking argument to parameter y of method swapped
-- Error: tests/neg-custom-args/captures/sep-pairs-unboxed.scala:58:26 -------------------------------------------------
58 |  val twoOther = Pair(two.fst, two.snd)  // error // error
   |                      ^^^^^^^
   |                      Separation failure: Illegal access to {two.fst} which is hidden by the previous definition
   |                      of value twoCopy with type Pair^.
   |                      This type hides capabilities  {two.fst, two.snd}
   |
   |                      where:    ^ refers to a fresh root capability in the type of value twoCopy
-- Error: tests/neg-custom-args/captures/sep-pairs-unboxed.scala:58:35 -------------------------------------------------
58 |  val twoOther = Pair(two.fst, two.snd)  // error // error
   |                               ^^^^^^^
   |                      Separation failure: Illegal access to {two.snd} which is hidden by the previous definition
   |                      of value twoCopy with type Pair^.
   |                      This type hides capabilities  {two.fst, two.snd}
   |
   |                      where:    ^ refers to a fresh root capability in the type of value twoCopy

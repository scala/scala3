-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/effect-swaps.scala:64:8 ----------------------------------
63 |      Result:
64 |        Future: // error, type mismatch
   |      ^
   |      Found:    Result.Ok[box Future[box T^?]^{fr, contextual$1}]
   |      Required: Result[Future[T], Nothing]
65 |          fr.await.ok
   |--------------------------------------------------------------------------------------------------------------------
   |Inline stack trace
   |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   |This location contains code that was inlined from effect-swaps.scala:41
41 |    boundary(Ok(body))
   |             ^^^^^^^^
    --------------------------------------------------------------------------------------------------------------------
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/effect-swaps.scala:69:10 ---------------------------------
69 |          Future: fut ?=> // error, type mismatch
   |          ^
   |Found:    (contextual$9: boundary.Label[box Result[box Future[box T^?]^?, box E^?]^?]) ?->{fr, async}
   |  box Future[box T^?]^{fr, contextual$9}
   |Required: (contextual$9: boundary.Label[Result[box Future[box T^?]^?, box E^?]]) ?->{fresh} box Future[box T^?]^?
   |
   |Note that reference contextual$9.type
   |cannot be included in outer capture set ?
70 |            fr.await.ok
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/effect-swaps.scala:73:35 ---------------------------------
73 |        Result.make[Future[T], E]: lbl ?=> // error: type mismatch
   |                                   ^
   |Found:    (lbl: boundary.Label[box Result[box Future[box T^?]^?, box E^?]^?]) ?->{fr, async} Future[box T^?]^{fr, lbl}
   |Required: (lbl: boundary.Label[Result[Future[T], E]]) ?->{fresh} Future[T]
74 |          Future: fut ?=>
75 |            fr.await.ok
   |
   | longer explanation available when compiling with `-explain`

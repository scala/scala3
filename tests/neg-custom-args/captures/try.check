-- Error: tests/neg-custom-args/captures/try.scala:23:28 ---------------------------------------------------------------
23 |  val a = handle[Exception, CanThrow[Exception]] { // error // error
   |                            ^^^^^^^^^^^^^^^^^^^
   |                            Type variable R of method handle cannot be instantiated to CT[Exception]^ since
   |                            that type captures the root capability `cap`.
   |
   |                            where:    ^ refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:23:49 ------------------------------------------
23 |  val a = handle[Exception, CanThrow[Exception]] { // error // error
   |                                                 ^
   |Found:    (x: CT[Exception]^) ->? CT[Exception]^{x}
   |Required: CT[Exception]^ => CT[Exception]^²
   |
   |where:    => refers to a fresh root capability created in value a when checking argument to parameter op of method handle
   |          ^  refers to the universal root capability
   |          ^² refers to a fresh root capability created in value a when checking argument to parameter op of method handle
   |
   |Note that capability x.type is not included in capture set {cap}
   |because x.type is not visible from cap in value a.
24 |    (x: CanThrow[Exception]) => x
25 |  }{
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:29:43 ------------------------------------------
29 |  val b = handle[Exception, () -> Nothing] { // error
   |                                           ^
   |Found:    (x: CT[Exception]^) ->? () ->{x} Nothing
   |Required: CT[Exception]^ => () -> Nothing
   |
   |where:    => refers to a fresh root capability created in value b when checking argument to parameter op of method handle
   |          ^  refers to the universal root capability
   |
   |Note that capability x.type is not included in capture set {}.
30 |    (x: CanThrow[Exception]) => () => raise(new Exception)(using x)
31 |  } {
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:35:18 ------------------------------------------
35 |  val xx = handle {  // error
   |                  ^
   |Found:    (x: CT[Exception]^) ->? () ->{x} Int
   |Required: CT[Exception]^ => () ->? Int
   |
   |where:    => refers to a fresh root capability created in value xx when checking argument to parameter op of method handle
   |          ^  refers to the universal root capability
   |
   |Note that capability x.type
   |cannot be included in outer capture set ?.
36 |    (x: CanThrow[Exception]) =>
37 |      () =>
38 |        raise(new Exception)(using x)
39 |        22
40 |  } {
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:47:31 ------------------------------------------
47 |val global: () -> Int = handle { // error
   |                               ^
   |Found:    (x: CT[Exception]^) ->? () ->{x} Int
   |Required: CT[Exception]^ => () ->? Int
   |
   |where:    => refers to a fresh root capability created in value global when checking argument to parameter op of method handle
   |          ^  refers to the universal root capability
   |
   |Note that capability x.type
   |cannot be included in outer capture set ?.
48 |  (x: CanThrow[Exception]) =>
49 |    () =>
50 |      raise(new Exception)(using x)
51 |      22
52 |} {
   |
   | longer explanation available when compiling with `-explain`

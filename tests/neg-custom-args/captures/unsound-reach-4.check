-- Error: tests/neg-custom-args/captures/unsound-reach-4.scala:16:18 ---------------------------------------------------
16 |class Bar extends Foo[File^]: // error
   |                  ^^^^^^^^^^
   |                  Type variable X of trait Foo cannot be instantiated to File^ since
   |                  that type captures the root capability `cap`.
   |
   |                  where:    ^ refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/unsound-reach-4.scala:20:29 ------------------------------
20 |  val backdoor: Foo[File^] = new Bar // error (follow-on, since the parent Foo[File^] of bar is illegal).
   |                             ^^^^^^^
   |                             Found:    Bar^?
   |                             Required: Foo[File^]
   |
   |                             where:    ^ refers to a fresh root capability in the type of value backdoor
   |
   |                             Note that capability cap is not included in capture set {cap}
   |                             because cap is not visible from cap in value backdoor.
   |
   | longer explanation available when compiling with `-explain`
-- [E164] Declaration Error: tests/neg-custom-args/captures/unsound-reach-4.scala:17:6 ---------------------------------
17 |  def use(@consume x: F): File^ = x // error @consume override
   |      ^
   |      error overriding method use in trait Foo of type (x: File^): File^;
   |        method use of type (@consume x: File^): File^² has incompatible type
   |
   |      where:    ^  refers to the universal root capability
   |                ^² refers to a root capability associated with the result type of (@consume x: File^): File^²
   |
   | longer explanation available when compiling with `-explain`

-- [E190] Potential Issue Warning: tests/neg-custom-args/captures/real-try.scala:38:2 ----------------------------------
38 |  b
   |  ^
   |  Discarded non-Unit value of type Cell[() -> Unit]. Add `: Unit` to discard silently.
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/real-try.scala:14:2 -----------------------------------------------------------
14 |  try  // error
   |  ^
   |  The result of `try` cannot have type () => Unit since
   |  that type captures the root capability `cap`.
   |  This is often caused by a locally generated exception capability leaking as part of its result.
15 |    () => foo(1)
16 |  catch
17 |    case _: Ex1 => ???
18 |    case _: Ex2 => ???
-- Error: tests/neg-custom-args/captures/real-try.scala:20:10 ----------------------------------------------------------
20 |  val x = try // error
   |          ^
   |          The result of `try` cannot have type () => Unit since
   |          that type captures the root capability `cap`.
   |          This is often caused by a locally generated exception capability leaking as part of its result.
21 |    () => foo(1)
22 |  catch
23 |    case _: Ex1 => ???
24 |    case _: Ex2 => ???
-- Error: tests/neg-custom-args/captures/real-try.scala:26:10 ----------------------------------------------------------
26 |  val y = try  // error
   |          ^
   |          The result of `try` cannot have type () => Cell[Unit]^? since
   |          that type captures the root capability `cap`.
   |          This is often caused by a locally generated exception capability leaking as part of its result.
27 |    () => Cell(foo(1))
28 |  catch
29 |    case _: Ex1 => ???
30 |    case _: Ex2 => ???
-- Error: tests/neg-custom-args/captures/real-try.scala:32:10 ----------------------------------------------------------
32 |  val b = try // error
   |          ^
   |          The result of `try` cannot have type Cell[box () => Unit]^? since
   |          the part box () => Unit of that type captures the root capability `cap`.
   |          This is often caused by a locally generated exception capability leaking as part of its result.
33 |    Cell(() => foo(1))
34 |  catch
35 |    case _: Ex1 => ???
36 |    case _: Ex2 => ???

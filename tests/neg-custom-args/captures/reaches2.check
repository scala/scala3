-- Error: tests/neg-custom-args/captures/reaches2.scala:10:10 ----------------------------------------------------------
10 |  ps.map((x, y) => compose1(x, y)) // error // error // error
   |          ^
   |          Local reach capability ps* leaks into capture scope of method mapCompose.
   |          To allow this, the parameter ps should be declared with a @use annotation
-- Error: tests/neg-custom-args/captures/reaches2.scala:10:13 ----------------------------------------------------------
10 |  ps.map((x, y) => compose1(x, y)) // error // error // error
   |             ^
   |             Local reach capability ps* leaks into capture scope of method mapCompose.
   |             To allow this, the parameter ps should be declared with a @use annotation
-- Error: tests/neg-custom-args/captures/reaches2.scala:10:28 ----------------------------------------------------------
10 |  ps.map((x, y) => compose1(x, y)) // error // error // error
   |                            ^
   |Separation failure: argument of type  A ->{x} A
   |to method compose1: [A, B, C](f: A => B, g: B => C): A ->{f, g} C
   |corresponds to capture-polymorphic formal parameter f of type  A^? => A^?
   |and hides capabilities  {x}.
   |Some of these overlap with the captures of the second argument with type  A ->{y} A.
   |
   |  Hidden set of current argument        : {x}
   |  Hidden footprint of current argument  : {x, ps*}
   |  Capture set of second argument        : {y}
   |  Footprint set of second argument      : {y, ps*}
   |  The two sets overlap at               : {ps*}
   |
   |where:    => refers to a fresh root capability created in anonymous function of type (x$1: (A^? ->{ps*} A^?, A^? ->{ps*} A^?)^?): A^? ->{ps*} A^? when checking argument to parameter f of method compose1

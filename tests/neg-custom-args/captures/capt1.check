-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:5:2 ------------------------------------------
5 |  () => if x == null then y else y  // error
  |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |  Found:    () ->{x} C
  |  Required: () -> C
  |  Note that capability (x : C^) is not included in capture set {}.
  |
  | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:8:2 ------------------------------------------
8 |  () => if x == null then y else y  // error
  |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |  Found:    () ->{x} C^?
  |  Required: Matchable
  |  Note that capability (x : C^) is not included in capture set {}.
  |
  | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:15:2 -----------------------------------------
15 |  def f(y: Int) = if x == null then y else y  // error
   |  ^
   |  Found:    (y: Int) ->{x} Int
   |  Required: Matchable
   |  Note that capability (x : C^) is not included in capture set {}.
16 |  f
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:22:2 -----------------------------------------
22 |  class F(y: Int) extends A:   // error
   |  ^
   |  Found:    A^{x}
   |  Required: A
   |  Note that capability (x : C^) is not included in capture set {}.
23 |    def m() = if x == null then y else y
24 |  F(22)
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:27:2 -----------------------------------------
27 |  new A: // error
   |  ^
   |  Found:    A^{x}
   |  Required: A
   |  Note that capability (x : C^) is not included in capture set {}.
28 |    def m() = if x == null then y else y
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/capt1.scala:36:16 -------------------------------------------------------------
36 |  val z2 = h[() -> Cap](() => x) // error // error
   |             ^^^^^^^^^
   |             Type variable X of method h cannot be instantiated to () -> C^ since
   |             the part C^ of that type captures the root capability `cap`.
   |
   |             where:    ^ refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:36:24 ----------------------------------------
36 |  val z2 = h[() -> Cap](() => x) // error // error
   |                        ^^^^^^^
   |Found:    () ->? C^
   |Required: () -> C^²
   |
   |where:    ^  refers to a root capability associated with the result type of (): C^
   |          ^² refers to a fresh root capability created in value z2 when checking argument to parameter a of method h
   |
   |Note that capability <cap of (): C^> is not included in capture set {cap}
   |because <cap of (): C^> is not visible from cap in value z2.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/capt1.scala:37:5 -----------------------------------------
37 |    (() => C()) // error
   |     ^^^^^^^^^
   |Found:    () ->? C^
   |Required: () -> C^²
   |
   |where:    ^  refers to a root capability associated with the result type of (): C^
   |          ^² refers to a fresh root capability created in value z2 when checking argument to parameter b of method h
   |
   |Note that capability <cap of (): C^> is not included in capture set {cap}
   |because <cap of (): C^> is not visible from cap in value z2.
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/capt1.scala:38:13 -------------------------------------------------------------
38 |  val z3 = h[(() -> Cap) @retains[x.type]](() => x)(() => C())  // error
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |             Type variable X of method h cannot be instantiated to () ->{x} C^ since
   |             the part C^ of that type captures the root capability `cap`.
   |
   |             where:    ^ refers to the universal root capability
-- Error: tests/neg-custom-args/captures/capt1.scala:43:7 --------------------------------------------------------------
43 |    if x == null then  // error: separation
   |       ^
   |       Separation failure: Illegal access to {x} which is hidden by the previous definition
   |       of value z1 with type () => C^.
   |       This type hides capabilities  {x}
   |
   |       where:    => refers to a fresh root capability in the type of value z1
   |                 ^  refers to a fresh root capability in the type of value z1
-- Error: tests/neg-custom-args/captures/capt1.scala:44:12 -------------------------------------------------------------
44 |      () => x  // error: separation
   |            ^
   |            Separation failure: Illegal access to {x} which is hidden by the previous definition
   |            of value z1 with type () => C^.
   |            This type hides capabilities  {x}
   |
   |            where:    => refers to a fresh root capability in the type of value z1
   |                      ^  refers to a fresh root capability in the type of value z1
-- Error: tests/neg-custom-args/captures/capt1.scala:47:2 --------------------------------------------------------------
47 |  x // error: separation
   |  ^
   |  Separation failure: Illegal access to {x} which is hidden by the previous definition
   |  of value z1 with type () => C^.
   |  This type hides capabilities  {x}
   |
   |  where:    => refers to a fresh root capability in the type of value z1
   |            ^  refers to a fresh root capability in the type of value z1

-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/vars.scala:24:8 ------------------------------------------
24 |    a = x => g(x)      // error
   |        ^^^^^^^^^
   |        Found:    (x: String) ->{cap3} String
   |        Required: String ->{cap1} String
   |
   |        Note that capability cap3 cannot be included in capture set {cap1} of variable a.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/vars.scala:25:8 ------------------------------------------
25 |    a = g      // error
   |        ^
   |        Found:    (x: String) ->{cap3} String
   |        Required: String ->{cap1} String
   |
   |        Note that capability cap3 cannot be included in capture set {cap1} of variable a.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/vars.scala:27:12 -----------------------------------------
27 |    b = List(g) // error
   |        ^^^^^^^
   |        Found:    List[String ->{cap3} String]
   |        Required: List[String ->{cap1, cap2} String]
   |
   |        Note that capability cap3 is not included in capture set {cap1, cap2}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/vars.scala:36:10 -----------------------------------------
36 |  local { cap3 => // error
   |          ^
   |          Found:    (cap3: CC^) ->'s1 String ->{cap3} String
   |          Required: CC^ -> String ->{cap3²} String
   |
   |          Note that capability cap3 cannot be included in outer capture set {cap3²}.
   |
   |          where:    ^     refers to the universal root capability
   |                    cap3  is a reference to a value parameter
   |                    cap3² is a parameter in an anonymous function in method test
37 |    def g(x: String): String = if cap3 == cap3 then "" else "a"
38 |    g
   |
   | longer explanation available when compiling with `-explain`

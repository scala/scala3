-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/effect-swaps-explicit.scala:64:8 -------------------------
63 |      Result:
64 |        Future: // error, type mismatch
   |      ^
   |      Found:    Result.Ok[Future[T^?]^{fr, contextual$1}]
   |      Required: Result[Future[T], Nothing]
   |      Note that capability (fr : Future[Result[T, E]]^) is not included in capture set {}.
65 |          fr.await.ok
   |--------------------------------------------------------------------------------------------------------------------
   |Inline stack trace
   |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   |This location contains code that was inlined from effect-swaps-explicit.scala:41
41 |    boundary(Ok(body))
   |             ^^^^^^^^
    --------------------------------------------------------------------------------------------------------------------
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/effect-swaps-explicit.scala:69:10 ------------------------
69 |          Future: fut ?=> // error, type mismatch
   |          ^
   |Found:    (contextual$9: boundary.Label[Result[Future[T^?]^?, E^?]^?]^?) ?->{fr, async} Future[T^?]^{fr, contextual$9}
   |Required: (boundary.Label[Result[Future[T^?]^?, E^?]]^) ?=> Future[T^?]^?
   |
   |where:    ?=> refers to a fresh root capability created in method fail4 when checking argument to parameter body of method make
   |          ^   refers to the universal root capability
   |
   |Note that capability contextual$9.type
   |cannot be included in outer capture set ?.
70 |            fr.await.ok
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/effect-swaps-explicit.scala:73:35 ------------------------
73 |        Result.make[Future[T], E]: lbl ?=> // error: type mismatch
   |                                   ^
   |Found:    (lbl: boundary.Label[Result[Future[T^?]^?, E^?]^?]^?) ?->{fr, async} Future[T^?]^{fr, lbl}
   |Required: (boundary.Label[Result[Future[T], E]]^) ?=> Future[T]
   |
   |where:    ?=> refers to a fresh root capability created in method fail5 when checking argument to parameter body of method make
   |          ^   refers to the universal root capability
   |
   |Note that capability (fr : Future[Result[T, E]]^) is not included in capture set {}.
74 |          Future: fut ?=>
75 |            fr.await.ok
   |
   | longer explanation available when compiling with `-explain`

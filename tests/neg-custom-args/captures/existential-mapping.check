-- Error: tests/neg-custom-args/captures/existential-mapping.scala:46:10 -----------------------------------------------
46 |  val z2: (x: A^) => Array[C^] = ??? // error
   |          ^^^^^^^^^^^^^^^^^^^^
   |          Array[C^] captures the root capability `cap` in invariant position.
   |          This capability cannot be converted to an existential in the result type of a function.
   |
   |          where:    ^ refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:9:25 ---------------------------
9 |  val _:  (x: C^) -> C = x1 // error
  |                         ^^
  |                         Found:    (x1 : (x: C^) -> C^²)
  |                         Required: (x: C^) -> C
  |
  |                         where:    ^  refers to the universal root capability
  |                                   ^² refers to a root capability associated with the result type of (x: C^): C^²
  |
  |                         Note that capability <cap of (x: C^): C^> is not included in capture set {}.
  |
  | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:12:20 --------------------------
12 |  val _:  C^ -> C = x2 // error
   |                    ^^
   |                    Found:    C^ -> C^{x2*}
   |                    Required: C^ -> C
   |
   |                    where:    ^ refers to the universal root capability
   |
   |                    Note that capability x2* is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:15:30 --------------------------
15 |  val _: A^ -> (x: C^) -> C = x3 // error
   |                              ^^
   |                        Found:    (x3 : A^ -> (x: C^) -> C^²)
   |                        Required: A^ -> (x: C^) -> C
   |
   |                        where:    ^  refers to the universal root capability
   |                                  ^² refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                        Note that capability <cap of (x: C^): C^> is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:18:25 --------------------------
18 |  val _: A^ -> C^ -> C = x4 // error
   |                         ^^
   |                         Found:    A^ -> C^ -> C^{x4*}
   |                         Required: A^ -> C^ -> C
   |
   |                         where:    ^ refers to the universal root capability
   |
   |                         Note that capability x4* is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:21:30 --------------------------
21 |  val _: A^ -> (x: C^) -> C = x5 // error
   |                              ^^
   |                        Found:    (x5 : A^ -> (x: C^) -> C^²)
   |                        Required: A^ -> (x: C^) -> C
   |
   |                        where:    ^  refers to the universal root capability
   |                                  ^² refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                        Note that capability <cap of (x: C^): C^> is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:24:30 --------------------------
24 |  val _: A^ -> (x: C^) => C = x6 // error
   |                              ^^
   |                        Found:    A^ -> (x: C^) ->{x6*} C^²
   |                        Required: A^ -> (x: C^) => C
   |
   |                        where:    => refers to a fresh root capability in the type of value _$6
   |                                  ^  refers to the universal root capability
   |                                  ^² refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                        Note that capability <cap of (x: C^): C^> is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:27:25 --------------------------
27 |  val _:  (x: C^) => C = y1 // error
   |                         ^^
   |                       Found:    (y1 : (x: C^) => C^²)
   |                       Required: (x: C^) =>² C
   |
   |                       where:    =>  refers to a fresh root capability in the type of value y1
   |                                 =>² refers to a fresh root capability in the type of value _$7
   |                                 ^   refers to the universal root capability
   |                                 ^²  refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                       Note that capability cap is not included in capture set {cap}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:30:20 --------------------------
30 |  val _:  C^ => C = y2 // error
   |                    ^^
   |                    Found:    C^ ->{y2} C^{y2*}
   |                    Required: C^ => C
   |
   |                    where:    => refers to a fresh root capability in the type of value _$8
   |                              ^  refers to the universal root capability
   |
   |                    Note that capability y2* is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:33:30 --------------------------
33 |  val _: A^ => (x: C^) => C = y3 // error
   |                              ^^
   |                       Found:    A^ ->{y3} (x: C^) ->{y3*} C^²
   |                       Required: A^ => (x: C^) =>² C
   |
   |                       where:    =>  refers to a fresh root capability in the type of value _$9
   |                                 =>² refers to a fresh root capability in the type of value _$9
   |                                 ^   refers to the universal root capability
   |                                 ^²  refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                       Note that capability <cap of (x: C^): C^> is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:36:25 --------------------------
36 |  val _: A^ => C^ => C = y4 // error
   |                         ^^
   |                         Found:    A^ ->{y4} C^ ->{y4*} C^{y4*}
   |                         Required: A^ => C^ =>² C
   |
   |                         where:    =>  refers to a fresh root capability in the type of value _$10
   |                                   =>² refers to a fresh root capability in the type of value _$10
   |                                   ^   refers to the universal root capability
   |
   |                         Note that capability y4* is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:39:30 --------------------------
39 |  val _: A^ => (x: C^) -> C = y5 // error
   |                              ^^
   |                       Found:    (y5 : A^ => (x: C^) -> C^²)
   |                       Required: A^ =>² (x: C^) -> C
   |
   |                       where:    =>  refers to a fresh root capability in the type of value y5
   |                                 =>² refers to a fresh root capability in the type of value _$11
   |                                 ^   refers to the universal root capability
   |                                 ^²  refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                       Note that capability cap is not included in capture set {cap}.
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/existential-mapping.scala:42:30 --------------------------
42 |  val _: A^ => (x: C^) => C = y6 // error
   |                              ^^
   |                       Found:    A^ ->{y6} (x: C^) ->{y6*} C^²
   |                       Required: A^ => (x: C^) =>² C
   |
   |                       where:    =>  refers to a fresh root capability in the type of value _$12
   |                                 =>² refers to a fresh root capability in the type of value _$12
   |                                 ^   refers to the universal root capability
   |                                 ^²  refers to a root capability associated with the result type of (x: C^): C^²
   |
   |                       Note that capability <cap of (x: C^): C^> is not included in capture set {}.
   |
   | longer explanation available when compiling with `-explain`

-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:22:13 --------------------------------------
22 |  usingFile: f => // error
   |             ^
   |Found:    (f: File^?) ->? Unit
   |Required: File^ => Unit
   |
   |where:    => refers to a fresh root capability created in method runAll0 when checking argument to parameter f of method usingFile
   |          ^  refers to the universal root capability
23 |    cur = (() => f.write()) :: Nil
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:32:13 --------------------------------------
32 |  usingFile: f => // error
   |             ^
   |Found:    (f: File^?) ->? Unit
   |Required: File^ => Unit
   |
   |where:    => refers to a fresh root capability created in method runAll1 when checking argument to parameter f of method usingFile
   |          ^  refers to the universal root capability
33 |    cur.set:
34 |      (() => f.write()) :: Nil
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/reaches.scala:44:16 -----------------------------------------------------------
44 |  val cur = Ref[List[Proc]](xs) // error
   |                ^^^^^^^^^^
   |                Type variable T of constructor Ref cannot be instantiated to List[() => Unit] since
   |                the part () => Unit of that type captures the root capability `cap`.
   |
   |                where:    => refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:46:35 --------------------------------------
46 |    val next: () => Unit = cur.get.head // error
   |                           ^^^^^^^^^^^^
   |                           Found:    () => Unit
   |                           Required: () =>² Unit
   |
   |                           where:    =>  refers to the universal root capability
   |                                     =>² refers to a fresh root capability in the type of value next
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:48:20 --------------------------------------
48 |    cur.set(cur.get.tail: List[Proc]) // error
   |            ^^^^^^^^^^^^
   |            Found:    List[() => Unit]
   |            Required: List[() =>² Unit]
   |
   |            where:    =>  refers to the universal root capability
   |                      =>² refers to a fresh root capability created in method runAll3
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/reaches.scala:54:51 -----------------------------------------------------------
54 |  val id: Id[Proc, Proc] = new Id[Proc, () -> Unit] // error
   |                                                   ^
   |                                    Type variable A of constructor Id cannot be instantiated to () => Unit since
   |                                    that type captures the root capability `cap`.
   |
   |                                    where:    => refers to the universal root capability
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:59:27 --------------------------------------
59 |  val id: File^ -> File^ = x => x // error
   |                           ^^^^^^
   |                           Found:    (x: File^) ->? File^{x}
   |                           Required: File^ -> File^²
   |
   |                           where:    ^  refers to the universal root capability
   |                                     ^² refers to a fresh root capability in the type of value id
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:67:32 --------------------------------------
67 |  val id: (x: File^) -> File^ = x => x // error
   |                                ^^^^^^
   |                  Found:    (x: File^) ->? File^{x}
   |                  Required: (x: File^) -> File^²
   |
   |                  where:    ^  refers to the universal root capability
   |                            ^² refers to a root capability associated with the result type of (x: File^): File^²
   |
   |                  Note that the existential capture root in File^
   |                  cannot subsume the capability x.type since that capability is not a `Sharable` capability
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:70:38 --------------------------------------
70 |  val leaked = usingFile[File^{id*}]: f => // error
   |                                      ^
   |Found:    (f: File^?) ->? File^{id*}
   |Required: File^ => File^{id*}
   |
   |where:    => refers to a fresh root capability created in value leaked when checking argument to parameter f of method usingFile
   |          ^  refers to the universal root capability
71 |    val f1: File^{id*} = id(f)
72 |    f1
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:88:10 --------------------------------------
88 |  ps.map((x, y) => compose1(x, y)) // error
   |          ^^^^^^^^^^^^^^^^^^^^^^^
   |Found:    (x$1: (A^ ->? A^?, A^ ->? A^?)^?) ->? A^? ->? A^?
   |Required: ((A ->{ps*} A, A ->{ps*} A)) => A^? ->? A^?
   |
   |where:    => refers to a fresh root capability created in method mapCompose when checking argument to parameter f of method map
   |          ^  refers to the universal root capability
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:91:10 --------------------------------------
91 |  ps.map((x, y) => compose1(x, y)) // error
   |          ^^^^^^^^^^^^^^^^^^^^^^^
   |Found:    (x$1: (A^ ->? A^?, A^ ->? A^?)^?) ->? A^? ->? A^?
   |Required: ((A ->{ps*} A, A ->{ps*} A)) => A^? ->? A^?
   |
   |where:    => refers to a fresh root capability created in method mapCompose2 when checking argument to parameter f of method map
   |          ^  refers to the universal root capability
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/reaches.scala:39:31 -----------------------------------------------------------
39 |    val next: () => Unit = cur.head   // error
   |                           ^^^^^^^^
   |                           Local reach capability xs* leaks into capture scope of method runAll2.
   |                           To allow this, the parameter xs should be declared with a @use annotation

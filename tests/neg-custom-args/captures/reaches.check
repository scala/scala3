-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:22:11 --------------------------------------
22 |    cur = (() => f.write()) :: Nil // error
   |           ^^^^^^^^^^^^^^^^^^^^^^^
   |           Found:    List[box () ->{f} Unit]
   |           Required: List[box () ->{xs*} Unit]
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:33:7 ---------------------------------------
33 |      (() => f.write()) :: Nil // error
   |       ^^^^^^^^^^^^^^^^^^^^^^^
   |       Found:    List[box () ->{f} Unit]
   |       Required: box List[box () ->{xs*} Unit]^?
   |
   |       Note that reference (f : File^), defined in method $anonfun
   |       cannot be included in outer capture set {xs*} of value cur
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/reaches.scala:36:6 ------------------------------------------------------------
36 |  var cur: List[Proc] = xs   // error
   |      ^
   |      Mutable variable cur cannot have type List[box () => Unit] since
   |      the part box () => Unit of that type captures the root capability `cap`.
-- Error: tests/neg-custom-args/captures/reaches.scala:43:16 -----------------------------------------------------------
43 |  val cur = Ref[List[Proc]](xs) // error
   |                ^^^^^^^^^^
   |                Type variable T of constructor Ref cannot be instantiated to List[box () => Unit] since
   |                the part box () => Unit of that type captures the root capability `cap`.
-- Error: tests/neg-custom-args/captures/reaches.scala:53:51 -----------------------------------------------------------
53 |  val id: Id[Proc, Proc] = new Id[Proc, () -> Unit] // error
   |                                                   ^
   |                                Type variable A of constructor Id cannot be instantiated to box () => Unit since
   |                                that type captures the root capability `cap`.
-- Error: tests/neg-custom-args/captures/reaches.scala:55:6 ------------------------------------------------------------
55 |    id(() => f.write()) // error
   |    ^^^^^^^^^^^^^^^^^^^
   |    Local reach capability id* leaks into capture scope of method test
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/reaches.scala:62:27 --------------------------------------
62 |    val f1: File^{id*} = id(f) // error, since now id(f): File^ // error
   |                         ^^^^^
   |                         Found:    File^{f}
   |                         Required: File^{id*}
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/reaches.scala:79:10 -----------------------------------------------------------
79 |  ps.map((x, y) => compose1(x, y)) // error // error
   |          ^
   |          Local reach capability ps* leaks into capture scope of method mapCompose.
   |          To allow this, the parameter ps should be declared with a @use annotation
-- Error: tests/neg-custom-args/captures/reaches.scala:79:13 -----------------------------------------------------------
79 |  ps.map((x, y) => compose1(x, y)) // error // error
   |             ^
   |             Local reach capability ps* leaks into capture scope of method mapCompose.
   |             To allow this, the parameter ps should be declared with a @use annotation
-- Error: tests/neg-custom-args/captures/reaches.scala:61:31 -----------------------------------------------------------
61 |  val leaked = usingFile[File^{id*}]: f => // error
   |                               ^^^
   |                               id* cannot be tracked since its deep capture set is empty
-- Error: tests/neg-custom-args/captures/reaches.scala:62:18 -----------------------------------------------------------
62 |    val f1: File^{id*} = id(f) // error, since now id(f): File^ // error
   |                  ^^^
   |                  id* cannot be tracked since its deep capture set is empty

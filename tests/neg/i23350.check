-- [E120] Naming Error: tests/neg/i23350.scala:8:7 ---------------------------------------------------------------------
8 |object D extends A: // error
  |       ^
  |       Name clash between defined and inherited member:
  |       def apply(p: A.this.Props): Unit in class A at line 5 and
  |       def apply(a: UndefOr2[String]): Unit in object D at line 10
  |       have the same type (a: Object): Unit after erasure.
  |
  |       Consider adding a @targetName annotation to one of the conflicting definitions
  |       for disambiguation.
  |---------------------------------------------------------------------------------------------------------------------
  | Explanation (enabled by `-explain`)
  |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  |
  | As part of the Scala compilation pipeline every type is reduced to its erased
  | (runtime) form. In this phase, among other transformations, generic parameters
  | disappear and separate parameter-list boundaries are flattened.
  |
  | For example, both `f[T](x: T)(y: String): Unit` and `f(x: Any, z: String): Unit`
  | erase to the same runtime signature `f(x: Object, y: String): Unit`. Note that
  | parameter names are irrelevant.
  |
  | In your code the two declarations
  |
  |   def apply(p: A.this.Props): Unit
  |   def apply(a: UndefOr2[String]): Unit
  |
  | erase to the identical signature
  |
  |   (a: Object): Unit
  |
  | so the compiler cannot keep both: the generated bytecode symbols would collide.
  |
  | To fix this error, you need to disambiguate the two definitions. You can either:
  |
  | 1. Rename one of the definitions, or
  | 2. Keep the same names in source but give one definition a distinct
  |    bytecode-level name via `@targetName` for example:
  |
  |       @targetName("apply_2")
  |       def apply(a: UndefOr2[String]): Unit
  |
  | Choose the `@targetName` argument carefully: it is the name that will be used
  | when calling the method externally, so it should be unique and descriptive.
  |         
   ---------------------------------------------------------------------------------------------------------------------

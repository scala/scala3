-- [E189] Not Found Error: tests/neg/i18684.scala:3:6 ------------------------------------------------------------------
3 |  val s(): String = "hello, world" // error
  |      ^
  |      no pattern match extractor named s was found
  |---------------------------------------------------------------------------------------------------------------------
  | Explanation (enabled by `-explain`)
  |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  | An application s(...) in a pattern can refer to an extractor
  | which defines an unapply or unapplySeq method. Example:
  |
  |   object split:
  |     def unapply(x: String) =
  |       val (leading, trailing) = x.splitAt(x.length / 2)
  |       Some((leading, trailing))
  |
  |   val split(fst, snd) = "HiHo"
  |
  | The extractor pattern `split(fst, snd)` defines `fst` as the first half "Hi" and
  | `snd` as the second half "Ho" of the right hand side "HiHo". Case classes and
  | enum cases implicitly define extractors with the name of the class or enum case.
  | Here, no extractor named s was found, so the pattern could not be typed.
   ---------------------------------------------------------------------------------------------------------------------
-- [E189] Not Found Error: tests/neg/i18684.scala:5:6 ------------------------------------------------------------------
5 |  val i() = 22 // error
  |      ^
  |      no pattern match extractor named i was found
  |---------------------------------------------------------------------------------------------------------------------
  | Explanation (enabled by `-explain`)
  |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  | An application i(...) in a pattern can refer to an extractor
  | which defines an unapply or unapplySeq method. Example:
  |
  |   object split:
  |     def unapply(x: String) =
  |       val (leading, trailing) = x.splitAt(x.length / 2)
  |       Some((leading, trailing))
  |
  |   val split(fst, snd) = "HiHo"
  |
  | The extractor pattern `split(fst, snd)` defines `fst` as the first half "Hi" and
  | `snd` as the second half "Ho" of the right hand side "HiHo". Case classes and
  | enum cases implicitly define extractors with the name of the class or enum case.
  | Here, no extractor named i was found, so the pattern could not be typed.
   ---------------------------------------------------------------------------------------------------------------------
-- [E189] Not Found Error: tests/neg/i18684.scala:10:8 -----------------------------------------------------------------
10 |    val foo() = "33" // error
   |        ^^^
   |        no pattern match extractor named foo was found
   |--------------------------------------------------------------------------------------------------------------------
   | Explanation (enabled by `-explain`)
   |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   | An application foo(...) in a pattern can refer to an extractor
   | which defines an unapply or unapplySeq method. Example:
   |
   |   object split:
   |     def unapply(x: String) =
   |       val (leading, trailing) = x.splitAt(x.length / 2)
   |       Some((leading, trailing))
   |
   |   val split(fst, snd) = "HiHo"
   |
   | The extractor pattern `split(fst, snd)` defines `fst` as the first half "Hi" and
   | `snd` as the second half "Ho" of the right hand side "HiHo". Case classes and
   | enum cases implicitly define extractors with the name of the class or enum case.
   | Here, no extractor named foo was found, so the pattern could not be typed.
    --------------------------------------------------------------------------------------------------------------------
-- [E127] Pattern Match Error: tests/neg/i18684.scala:12:6 -------------------------------------------------------------
12 |  val inner(x) = 3 // error
   |      ^^^^^
   |Test.inner cannot be used as an extractor in a pattern because it lacks an unapply or unapplySeq method with the appropriate signature
   |--------------------------------------------------------------------------------------------------------------------
   | Explanation (enabled by `-explain`)
   |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   | An unapply method should be in an object, take a single explicit term parameter, and:
   |   - If it is just a test, return a Boolean. For example case even()
   |   - If it returns a single sub-value of type T, return an Option[T]
   |   - If it returns several sub-values T1,...,Tn, group them in an optional tuple Option[(T1,...,Tn)]
   |
   | Additionaly, unapply or unapplySeq methods cannot take type parameters after their explicit term parameter.
   |
   | Sometimes, the number of sub-values isn't fixed and we would like to return a sequence.
   | For this reason, you can also define patterns through unapplySeq which returns Option[Seq[T]].
   | This mechanism is used for instance in pattern case List(x1, ..., xn)
    --------------------------------------------------------------------------------------------------------------------

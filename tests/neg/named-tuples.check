-- Error: tests/neg/named-tuples.scala:8:19 ----------------------------------------------------------------------------
8 |  val illformed = (_2 = 2) // error
  |                   ^^^^^^
  |                   _2 cannot be used as the name of a tuple element because it is a regular tuple selector
-- Error: tests/neg/named-tuples.scala:9:20 ----------------------------------------------------------------------------
9 |  type Illformed = (_1: Int) // error
  |                    ^^^^^^^
  |                    _1 cannot be used as the name of a tuple element because it is a regular tuple selector
-- Error: tests/neg/named-tuples.scala:10:40 ---------------------------------------------------------------------------
10 |  val illformed2 = (name = "", age = 0, name = true)  // error
   |                                        ^^^^^^^^^^^
   |                                        Duplicate tuple element name
-- Error: tests/neg/named-tuples.scala:11:45 ---------------------------------------------------------------------------
11 |  type Illformed2 = (name: String, age: Int, name: Boolean) // error
   |                                             ^^^^^^^^^^^^^
   |                                             Duplicate tuple element name
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:19:20 ------------------------------------------------------
19 |  val _: NameOnly = person // error
   |                    ^^^^^^
   |                    Found:    (Test.person : (name : String, age : Int))
   |                    Required: Test.NameOnly
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:20:18 ------------------------------------------------------
20 |  val _: Person = nameOnly // error
   |                  ^^^^^^^^
   |                  Found:    (Test.nameOnly : (name : String))
   |                  Required: Test.Person
   |
   | longer explanation available when compiling with `-explain`
-- [E172] Type Error: tests/neg/named-tuples.scala:21:41 ---------------------------------------------------------------
21 |  val _: Person = (name = "") ++ nameOnly // error
   |                                         ^
   |    Cannot prove that Tuple.Disjoint[Tuple1[("name" : String)], Tuple1[("name" : String)]] =:= (true : Boolean).
-- [E008] Not Found Error: tests/neg/named-tuples.scala:22:9 -----------------------------------------------------------
22 |  person._1 // error
   |  ^^^^^^^^^
   |  value _1 is not a member of (name : String, age : Int)
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:24:36 ------------------------------------------------------
24 |  val _: (age: Int, name: String) = person // error
   |                                    ^^^^^^
   |                                    Found:    (Test.person : (name : String, age : Int))
   |                                    Required: (age : Int, name : String)
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg/named-tuples.scala:26:17 ---------------------------------------------------------------------------
26 |  val (name = x, agee = y) = person // error
   |                 ^^^^^^^^
   |                 No element named `agee` is defined in selector type (name : String, age : Int)
-- Error: tests/neg/named-tuples.scala:29:10 ---------------------------------------------------------------------------
29 |    case (name = n, age = a) => () // error // error
   |          ^^^^^^^^
   |          No element named `name` is defined in selector type (String, Int)
-- Error: tests/neg/named-tuples.scala:29:20 ---------------------------------------------------------------------------
29 |    case (name = n, age = a) => () // error // error
   |                    ^^^^^^^
   |                    No element named `age` is defined in selector type (String, Int)
-- [E172] Type Error: tests/neg/named-tuples.scala:31:27 ---------------------------------------------------------------
31 |  val pp = person ++ (1, 2)  // error
   |                           ^
   |            Cannot prove that Tuple.Disjoint[(("name" : String), ("age" : String)), Tuple] =:= (true : Boolean).
-- [E172] Type Error: tests/neg/named-tuples.scala:34:18 ---------------------------------------------------------------
34 |  person ++ (1, 2) match // error
   |                  ^
   |            Cannot prove that Tuple.Disjoint[(("name" : String), ("age" : String)), Tuple] =:= (true : Boolean).
-- Error: tests/neg/named-tuples.scala:37:17 ---------------------------------------------------------------------------
37 |  val bad = ("", age = 10) // error
   |                 ^^^^^^^^
   |                 Illegal combination of named and unnamed tuple elements
-- Error: tests/neg/named-tuples.scala:40:20 ---------------------------------------------------------------------------
40 |    case (name = n, age) => () // error
   |                    ^^^
   |                    Illegal combination of named and unnamed tuple elements
-- Error: tests/neg/named-tuples.scala:41:16 ---------------------------------------------------------------------------
41 |    case (name, age = a) => () // error
   |                ^^^^^^^
   |                Illegal combination of named and unnamed tuple elements
-- Error: tests/neg/named-tuples.scala:44:10 ---------------------------------------------------------------------------
44 |    case (age = x) => // error
   |          ^^^^^^^
   |          No element named `age` is defined in selector type Tuple
-- [E172] Type Error: tests/neg/named-tuples.scala:46:27 ---------------------------------------------------------------
46 |  val p2 = person ++ person // error
   |                           ^
   |Cannot prove that Tuple.Disjoint[(("name" : String), ("age" : String)), (("name" : String), ("age" : String))] =:= (true : Boolean).
-- [E172] Type Error: tests/neg/named-tuples.scala:47:43 ---------------------------------------------------------------
47 |  val p3 = person ++ (first = 11, age = 33) // error
   |                                           ^
   |Cannot prove that Tuple.Disjoint[(("name" : String), ("age" : String)), (("first" : String), ("age" : String))] =:= (true : Boolean).
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:49:22 ------------------------------------------------------
49 |  val p5 = person.zip((first = 11, age = 33)) // error
   |                      ^^^^^^^^^^^^^^^^^^^^^^
   |                      Found:    (first : Int, age : Int)
   |                      Required: NamedTuple.NamedTuple[(("name" : String), ("age" : String)), Tuple]
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/named-tuples.scala:60:32 ------------------------------------------------------
60 |  val typo: (name: ?, age: ?) = (name = "he", ag = 1) // error
   |                                ^^^^^^^^^^^^^^^^^^^^^
   |                                Found:    (name : String, ag : Int)
   |                                Required: (name : ?, age : ?)
   |
   | longer explanation available when compiling with `-explain`

object Def:
  trait A
  trait B
  implicit def conv1(a: A): B = ??? // should not change
  given conv2: A => B = ???
  final given nonConv: A = ???
  given conv3: A => B = ???
  final given nonConv2: A = ???

  implicit class Extension(a: Int): // should not change
    def addedMethod(): A = ???
  implicit class ExtensionWithImplicit(t: String)(using a: Int):
    def addedMethod(): String = ???
  class NoNonimplicitParams()(using a: Int)

  def applicationTest(using a: Int): Unit = ???
  val application = applicationTest(using 0)
  val implicitArg: Int => Unit = (implicit a => applicationTest) // should not change

  given refined: (A {type B = Int}) = ???

  class EmptyParamListClass()(using a: Int)
  def emptyParamListTest() = new EmptyParamListClass()(using 0)
